name: Email Notification
on:
  workflow_run:
    workflows: ["Ansible Mention Monitor"]
    types:
      - completed

jobs:
  send-email:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'cancelled' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts from monitoring workflow
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        path: ./artifacts
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install pandas python-dotenv
        
    - name: Generate email content
      id: email-content
      run: |
        python3 << 'EOF'
        import json
        import glob
        import os
        from datetime import datetime
        
        # Find the mentions file
        mention_files = glob.glob('./artifacts/*/mentions_*.json')
        
        if not mention_files:
            print("No mention data found")
            subject = "üìä Ansible Daily Report - No Data"
            body = "No mentions found in the last 24 hours."
        else:
            with open(mention_files[0], 'r') as f:
                mentions = json.load(f)
            
            total = len(mentions)
            positive = sum(1 for m in mentions if m.get('sentiment_label') == 'positive')
            negative = sum(1 for m in mentions if m.get('sentiment_label') == 'negative')
            neutral = total - positive - negative
            
            # Calculate percentages
            pos_pct = (positive / total * 100) if total > 0 else 0
            neg_pct = (negative / total * 100) if total > 0 else 0
            
            # Get platform breakdown
            reddit_count = sum(1 for m in mentions if m.get('platform') == 'reddit')
            twitter_count = sum(1 for m in mentions if m.get('platform') == 'twitter')
            
            # Get top mentions
            top_mentions = sorted(mentions, key=lambda x: x.get('score', 0), reverse=True)[:5]
            
            # Get negative mentions for alerts
            negative_mentions = [m for m in mentions if m.get('sentiment_label') == 'negative']
            
            # Determine email type
            if neg_pct > 40 or negative > 10:
                subject = f"üö® Ansible Alert: High Negative Sentiment ({negative} negative mentions)"
                alert_section = f"""
        üö® **ALERT: High negative sentiment detected!**
        - {negative} negative mentions ({neg_pct:.1f}%)
        - Threshold exceeded (>40% negative or >10 negative mentions)
        
        **Recent Negative Mentions:**
        """
                for i, mention in enumerate(negative_mentions[:3], 1):
                    alert_section += f"""
        {i}. **{mention['platform'].title()}**: {mention['title'][:60]}...
           - Author: {mention['author']}
           - Score: {mention['score']}
           - URL: {mention['url']}
        """
            else:
                subject = f"üìä Ansible Daily Report: {total} mentions ({pos_pct:.1f}% positive)"
                alert_section = "‚úÖ **All clear**: No concerning sentiment patterns detected."
            
            # Build email body
            run_url = f"https://github.com/${{{{ github.repository }}}}/actions/runs/${{{{ github.event.workflow_run.id }}}}"
            
            body = f"""# Ansible Mention Monitoring Report
        **Date**: {datetime.now().strftime('%Y-%m-%d')}
        **Monitoring Period**: Last 24 hours
        
        {alert_section}
        
        ## üìä Summary
        - **Total Mentions**: {total}
        - **Platforms**: Reddit ({reddit_count}), Twitter ({twitter_count})
        - **Sentiment**: {positive} positive ({pos_pct:.1f}%), {negative} negative ({neg_pct:.1f}%), {neutral} neutral
        
        ## üî• Top Mentions (by engagement)
        """
            
            for i, mention in enumerate(top_mentions, 1):
                platform_emoji = "üî¥" if mention['platform'] == 'reddit' else "üê¶"
                body += f"""
        **{i}. {platform_emoji} {mention['title'][:60]}...**
        - Author: {mention['author']}
        - Score: {mention['score']} | Sentiment: {mention['sentiment_label']}
        - URL: {mention['url']}
        """
            
            body += f"""
        
        ## üìÅ Download Full Results
        [View workflow run and download artifacts]({run_url})
        
        ---
        *Automated report from ansible-mention-bot*
        """
        
        # Save to environment for GitHub Actions
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f'EMAIL_SUBJECT={subject}\n')
            
        # Save body to file (multiline)
        with open('email_body.txt', 'w') as f:
            f.write(body)
        
        print(f"Generated email: {subject}")
        EOF
        
    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: ${{ env.EMAIL_SUBJECT }}
        to: ${{ secrets.EMAIL_TO }}
        from: Ansible Mention Bot <${{ secrets.EMAIL_USERNAME }}>
        body: file://email_body.txt
        convert_markdown: true
        
    - name: Send Slack notification (optional)
      if: ${{ vars.SLACK_WEBHOOK_URL != '' }}
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        custom_payload: |
          {
            "text": "üìä Ansible Mention Report",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ env.EMAIL_SUBJECT }}\n\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}|View full results>"
                }
              }
            ]
          }