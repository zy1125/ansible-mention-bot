name: Ansible Mention Monitor

on:
  # schedule:
  #   # Run once daily at 9:00 AM UTC (5:00 AM EST / 2:00 AM PST)
  #   - cron: '0 9 * * *'
  workflow_dispatch:  # Allow manual trigger
  
env:
  PRODUCT_NAME: Ansible
  KEYWORDS: ansible,ansible automation platform,red hat ansible,ansible tower,awx
  SUBREDDITS: ansible,devops,sysadmin,automation,homelab,selfhosted,redhat
  CHECK_INTERVAL_HOURS: 24

jobs:
  monitor-mentions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download NLTK data (for TextBlob)
      run: |
        python -c "import nltk; nltk.download('punkt'); nltk.download('brown')"
        
    - name: Run mention monitoring
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ansible-mention-bot/1.0-github-actions
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
        BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
      run: |
        python mention_bot.py --hours 24
        
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if monitoring found issues
      with:
        name: mention-results-${{ github.run_number }}
        path: |
          mentions_*.json
          mentions_*.csv
          mention_bot.log
        retention-days: 30
        
    - name: Check for negative sentiment spike
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
        REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
        REDDIT_USER_AGENT: ansible-mention-bot/1.0-github-actions
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
        BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
      run: |
        # Run a quick check and create issue if too many negative mentions
        python -c "
        import json, glob, os
        files = glob.glob('mentions_*.json')
        if files:
            with open(files[0]) as f:
                mentions = json.load(f)
            
            negative_count = sum(1 for m in mentions if m.get('sentiment_label') == 'negative')
            total_count = len(mentions)
            
            if total_count > 0:
                negative_pct = (negative_count / total_count) * 100
                print(f'Negative sentiment: {negative_pct:.1f}% ({negative_count}/{total_count})')
                
                # Alert if >40% negative or >10 negative mentions (daily threshold)
                if negative_pct > 40 or negative_count > 10:
                    print('🚨 HIGH NEGATIVE SENTIMENT DETECTED!')
                    exit(1)
            else:
                print('No mentions found this cycle.')
        "
        
    - name: Create issue for negative sentiment
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the latest results
          const files = fs.readdirSync('.').filter(f => f.startsWith('mentions_') && f.endsWith('.json'));
          if (files.length === 0) return;
          
          const mentions = JSON.parse(fs.readFileSync(files[0], 'utf8'));
          const negativeMentions = mentions.filter(m => m.sentiment_label === 'negative');
          
          let body = `## 🚨 Daily Negative Sentiment Alert\n\n`;
          body += `Found ${negativeMentions.length} negative mentions out of ${mentions.length} total in the last 24 hours.\n\n`;
          body += `### Recent Negative Mentions:\n\n`;
          
          negativeMentions.slice(0, 5).forEach((mention, i) => {
            body += `${i + 1}. **${mention.platform}**: ${mention.title.substring(0, 60)}...\n`;
            body += `   - Author: ${mention.author}\n`;
            body += `   - Score: ${mention.score}\n`;
            body += `   - URL: ${mention.url}\n\n`;
          });
          
          body += `\n*Automated daily alert from mention monitoring bot*`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Daily Negative Sentiment Alert - ${new Date().toISOString().split('T')[0]}`,
            body: body,
            labels: ['alert', 'negative-sentiment']
          });
          
    - name: Generate email content
      id: email-content
      if: always()  # Run regardless of sentiment results
      run: |
        python3 << 'EOF'
        import json
        import glob
        import os
        from datetime import datetime
        
        # Find the mentions file
        mention_files = glob.glob('mentions_*.json')
        
        if not mention_files:
            print("No mention data found")
            subject = "📊 Ansible Daily Report - No Data"
            summary = "No mentions found in the last 24 hours."
            top_mentions = ""
        else:
            with open(mention_files[0], 'r') as f:
                mentions = json.load(f)
            
            total = len(mentions)
            positive = sum(1 for m in mentions if m.get('sentiment_label') == 'positive')
            negative = sum(1 for m in mentions if m.get('sentiment_label') == 'negative')
            neutral = total - positive - negative
            
            # Calculate percentages
            pos_pct = (positive / total * 100) if total > 0 else 0
            neg_pct = (negative / total * 100) if total > 0 else 0
            
            # Get platform breakdown
            reddit_count = sum(1 for m in mentions if m.get('platform') == 'reddit')
            twitter_count = sum(1 for m in mentions if m.get('platform') == 'twitter')
            bluesky_count = sum(1 for m in mentions if m.get('platform') == 'bluesky')
            
            # Get top mentions
            top_mentions_data = sorted(mentions, key=lambda x: x.get('score', 0), reverse=True)[:5]
            
            # Determine email type
            if neg_pct > 40 or negative > 10:
                subject = f"🚨 Ansible Alert: High Negative Sentiment ({negative} negative mentions)"
                alert_emoji = "🚨"
            else:
                subject = f"📊 Ansible Daily Report: {total} mentions ({pos_pct:.1f}% positive)"
                alert_emoji = "✅"
            
            # Build summary
            summary = f"""## {alert_emoji} Summary
        - **Total Mentions**: {total}
        - **Platforms**: Reddit ({reddit_count}), Twitter ({twitter_count}), Bluesky ({bluesky_count})  
        - **Sentiment**: {positive} positive ({pos_pct:.1f}%), {negative} negative ({neg_pct:.1f}%), {neutral} neutral"""
            
            # Build top mentions
            if top_mentions_data:
                top_mentions = "\n## 🔥 Top Mentions (by engagement)\n"
                for i, mention in enumerate(top_mentions_data, 1):
                    platform_emoji = {"reddit": "🔴", "twitter": "🐦", "bluesky": "☁️"}.get(mention['platform'], "📱")
                    top_mentions += f"\n**{i}. {platform_emoji} {mention['title'][:60]}...**\n"
                    top_mentions += f"- Author: {mention['author']} | Score: {mention['score']} | Sentiment: {mention['sentiment_label']}\n"
                    top_mentions += f"- URL: {mention['url']}\n"
            else:
                top_mentions = ""
        
        # Save outputs for GitHub Actions (escape special characters)
        import urllib.parse
        
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f'EMAIL_SUBJECT={subject}\n')
        
        # Save complex content to files instead of env vars
        with open('email_summary.txt', 'w') as f:
            f.write(summary)
        
        with open('email_top_mentions.txt', 'w') as f:
            f.write(top_mentions)
        
        print(f"Generated email: {subject}")
        EOF
        
    - name: Generate email body file
      if: always()
      run: |
        # Generate email body with proper shell execution
        echo "# Ansible Mention Monitoring Report" > email_body.txt
        echo "**Date**: $(date '+%Y-%m-%d %H:%M UTC')" >> email_body.txt
        echo "**Monitoring Period**: Last 24 hours" >> email_body.txt
        echo "" >> email_body.txt
        
        # Add summary content if it exists
        if [ -f email_summary.txt ]; then
          cat email_summary.txt >> email_body.txt
        else
          echo "## ✅ Summary" >> email_body.txt
          echo "No mention data available for this monitoring period." >> email_body.txt
        fi
        
        echo "" >> email_body.txt
        
        # Add top mentions content if it exists
        if [ -f email_top_mentions.txt ]; then
          cat email_top_mentions.txt >> email_body.txt
        fi
        
        echo "" >> email_body.txt
        echo "## 📁 Download Full Results" >> email_body.txt
        echo "[View workflow run and download artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> email_body.txt
        echo "" >> email_body.txt
        echo "**Available Files:**" >> email_body.txt
        echo "- \`mentions_*.json\` - Complete mention data with metadata" >> email_body.txt
        echo "- \`mentions_*.csv\` - Spreadsheet format for easy analysis" >> email_body.txt
        echo "- \`mention_bot.log\` - Detailed execution logs" >> email_body.txt
        echo "" >> email_body.txt
        echo "---" >> email_body.txt
        echo "*Automated report from ansible-mention-bot | Run #${{ github.run_number }}*" >> email_body.txt
        
        # Debug: show what we generated
        echo "Generated email body:"
        cat email_body.txt
        
    - name: Send email notification
      if: always()  # Send email regardless of sentiment results
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: ${{ env.EMAIL_SUBJECT }}
        to: ${{ secrets.EMAIL_TO }}
        from: Ansible Mention Bot <${{ secrets.EMAIL_USERNAME }}>
        body: file://email_body.txt
        convert_markdown: true